---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: notifications-floorist
objects:
- apiVersion: metrics.console.redhat.com/v1alpha1
  kind: FloorPlan
  metadata:
    name: notifications
  spec:
    database:
      secretName: ${FLOORIST_DB_SECRET_NAME}
    objectStore:
      secretName: ${FLOORIST_BUCKET_SECRET_NAME}
    suspend: ${{FLOORIST_SUSPEND}}
    queries:
      # Count the number of behavior groups associated to event types per
      # organization, and also show the bundle and the application they are
      # associated to.
      - prefix: insights/notifications/behavior_groups_event_types_org_id
        query: >-
          SELECT
            bun.display_name::TEXT AS bundle,
            apps.display_name::TEXT AS application,
            et.display_name::TEXT AS event_type,
            bg.org_id::TEXT,
            EXISTS (
              SELECT
                1
              FROM
                behavior_group_action AS bga
              WHERE
                bga.behavior_group_id = etb.behavior_group_id
            )::BOOLEAN AS actively_used,
            count(bg.*)::INTEGER AS "count"
          FROM
            event_type_behavior AS etb
          INNER JOIN
            event_type AS et
              ON et.id = etb.event_type_id
          INNER JOIN
            applications AS apps
              ON apps.id = et.application_id
          INNER JOIN
            behavior_group AS bg
              ON bg.id = etb.behavior_group_id
          INNER JOIN
            bundles AS bun
              ON bun.id = bg.bundle_id
          GROUP BY
            bun.display_name,
            apps.display_name,
            et.display_name,
            bg.org_id,
            actively_used
        # Count the number of email subscriptions, and group them by
        # application, subscription type, whether they are subscribed or not
        # and their org id.
      - prefix: insights/notifications/email_subscriptions_by_org_id
        query: >-
          SELECT
            bun.display_name::TEXT AS bundle,
            apps.display_name::TEXT AS application,
            es.org_id::TEXT,
            et.display_name::TEXT AS event_type,
            es.subscription_type::TEXT,
            es.subscribed::BOOLEAN,
            count(es.*)::INTEGER AS "count"
          FROM
            email_subscriptions AS es
          INNER JOIN
            event_type AS et
              ON et.id = es.event_type_id
          INNER JOIN
            applications AS apps
              ON apps.id = et.application_id
          INNER JOIN
            bundles AS bun
              ON bun.id = apps.bundle_id
          GROUP BY
            bun.display_name,
            apps.display_name,
            es.org_id,
            et.display_name,
            es.subscription_type,
            es.subscribed
      # Count the number of created endpoints per endpoint type, and group them
      # by organization ID.
      - prefix: insights/notifications/endpoint_types_by_org_id
        query: >-
          SELECT
            sub.org_id::TEXT,
            sub.endpoint_type::TEXT,
            sub.enabled::BOOLEAN,
            sub.actively_used::BOOLEAN,
            COUNT(*)::INTEGER AS "count"
          FROM
            (
              SELECT
              CASE
                WHEN
                  e.endpoint_type_v2 = 'CAMEL'
                THEN
                  LOWER(e.endpoint_sub_type)
                ELSE
                  LOWER(e.endpoint_type_v2)
              END AS endpoint_type,
              e.org_id,
              e.enabled AS enabled,
              EXISTS (
                SELECT
                  1
                FROM
                  behavior_group_action AS bga
                INNER JOIN
                  event_type_behavior AS etb ON etb.behavior_group_id = bga.behavior_group_id
                WHERE
                  bga.endpoint_id = e.id
                ) AS actively_used
              FROM
                endpoints AS e
            ) AS sub
          GROUP BY
            sub.endpoint_type,
            sub.org_id,
            sub.enabled,
            sub.actively_used;
      # Count the number of notifications grouped by bundle, application,
      # delivery status and the organization ID.
      - prefix: insights/notifications/events_by_bundle_app_status_org_id
        query: >-
          SELECT
            bun.display_name::TEXT AS bundle,
            apps.display_name::TEXT AS application,
            e.org_id::TEXT,
            CASE
              WHEN
                nh.endpoint_type_v2 = 'CAMEL'
              THEN
                LOWER(nh.endpoint_sub_type)
              ELSE
                LOWER(nh.endpoint_type_v2)
            END AS endpoint_type,
            nh.status::TEXT,
            count(nh.*)
          FROM
            notification_history AS nh
          INNER JOIN
            "event" AS e
              ON e.id = nh.event_id
          INNER JOIN
            applications AS apps
              ON apps.id = e.application_id
          INNER JOIN
            bundles AS bun
              ON bun.id = apps.bundle_id
          GROUP BY
            bun.display_name,
            apps.display_name,
            e.org_id,
            endpoint_type,
            nh.status
      # Count the number of received events from applications and group them
      # by bundle, application and organization ID.
      - prefix: insights/notifications/events_received_from_apps_by_bundle_app_org_id
        query: >-
          SELECT
            bundles.display_name AS bundle,
            applications.display_name AS application,
            e.org_id,
            COUNT(e.*)
          FROM
            "event" AS e
          INNER JOIN
            applications
              ON applications.id = e.application_id
          INNER JOIN
            bundles AS bundles
              ON bundles.id = e.bundle_id
          GROUP BY
            bundles.display_name,
            applications.display_name,
            e.org_id
      # Counts and lists the event types that each organization is using.
      - prefix: insights/notifications/event_types_per_organization
        query: >-
          SELECT
            event_type.display_name::TEXT AS event_type,
            behavior_group.org_id::TEXT
          FROM
            event_type
          INNER JOIN
            event_type_behavior AS etb
              ON etb.event_type_id = event_type.id
          INNER JOIN
            behavior_group_action AS bga
              ON bga.behavior_group_id = etb.behavior_group_id
          INNER JOIN
            behavior_group
              ON behavior_group.id = bga.behavior_group_id
parameters:
- name: FLOORIST_BUCKET_SECRET_NAME
  description: Floorist's S3 bucket's secret name
  required: true
  value: dummy-secret
- name: FLOORIST_DB_SECRET_NAME
  description: The database's secret name specification for the Floorist operator.
  value: notifications-backend-db
- name: FLOORIST_LOGLEVEL
  description: Floorist loglevel config
  value: 'INFO'
- name: FLOORIST_SUSPEND
  description: Disable Floorist cronjob execution
  required: true
  value: 'true'
